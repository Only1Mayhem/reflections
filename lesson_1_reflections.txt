	How did viewing a diff between two versions of a file help you see the bug that was introduced?

Using diff allowed me to more easily find the error on the new file because it displays the differences
concisely.
This will be particularly useful when trying new code - especially when something goes wrong. 


	How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

I could reflect on previous applications that I have created and how I developed them - 
more specifically, how the application "grew" to become its final product. I could use this growth
process as a basis to build upon and refine.


	What do you think are the pros anf cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pro: Manually saving allows me to commit complete changes, an automatic commits would include unfinshed code which would be confusing when trying to roll back.
Con: One runs the risk of not saving and losing data - but this is a habit I do not intend to get into.


	Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file seperately?
Code affects multiple files - keeping these files together is imperative to keeping the tracking more simple. Documents rarely affect one another, so saving an individual file is sufficient - or a folder of files.


	How can you use the commands git log and git diff to view the history of files?
'Git log' includes the date and defintion of the commit, this can be used to find a specific commit.
Once found, 'git diff' can be used to compare the two commits - any differences in any of the files within 
the commit will be displayed.


	How might using version control make you more confident to make changes that could break something?
Adding features may introduce bugs, which may disuade one from implementing features entirely. Version control provides an easy method to revert back to the origianl code, while still implementing new features.


	Now that you have your workspace set up, what do you want to try using Git for?
Checkout more commits for practice, and some more complicated code